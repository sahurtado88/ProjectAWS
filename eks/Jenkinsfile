properties([
    parameters([
        string(
            defaultValue: 'dev',
            name: 'Environment'
        ),
        choice(
            choices: ['plan', 'apply', 'destroy'], 
            name: 'Terraform_Action'
        )
    ])
])

pipeline {
    agent any

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    def validEnvironments = ['dev', 'staging', 'prod']
                    def validActions = ['plan', 'apply', 'destroy']
                    def tfvarsFile = "eks/eks/${params.Environment}.tfvars"

                    if (!validEnvironments.contains(params.Environment)) {
                        error "Invalid Environment: ${params.Environment}. Valid options are: ${validEnvironments.join(', ')}"
                    }

                    if (!validActions.contains(params.Terraform_Action)) {
                        error "Invalid Terraform_Action: ${params.Terraform_Action}. Valid options are: ${validActions.join(', ')}"
                    }

                    if (!fileExists(tfvarsFile)) {
                        error "TFVars file does not exist: ${tfvarsFile}"
                    }
                }
            }
        }

        stage('Preparing') {
            steps {
                sh 'echo Preparing'
            }
        }

        stage('Git Pulling') {
            steps {
                git branch: 'master', url: 'https://github.com/sahurtado88/ProjectAWS.git'
            }
        }

        stage('Init') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                    sh 'terraform -chdir=eks/eks init'
                }
            }
        }

        stage('Validate') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                    sh 'terraform -chdir=eks/eks validate'
                }
            }
        }

        stage('Action') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'us-east-1') {
                    script {    
                        try {
                            if (params.Terraform_Action == 'plan') {
                                sh "terraform -chdir=eks/eks plan -var-file=${params.Environment}.tfvars"
                            } else if (params.Terraform_Action == 'apply') {
                                sh "terraform -chdir=eks/eks apply -var-file=${params.Environment}.tfvars -auto-approve"
                            } else if (params.Terraform_Action == 'destroy') {
                                sh "terraform -chdir=eks/eks destroy -var-file=${params.Environment}.tfvars -auto-approve"
                            } else {
                                error "Invalid value for Terraform_Action: ${params.Terraform_Action}"
                            }
                        } catch (Exception e) {
                            echo "Error during Terraform action: ${e.getMessage()}"
                            currentBuild.result = 'FAILURE'
                            error "Pipeline failed due to an error in the Terraform action."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (currentBuild.result == 'FAILURE') {
                    echo "Sending failure notification..."
                    
                }
            }
        }

        cleanup {
            echo "Cleaning up resources..."
            
        }
    }
}
